
function macready(mac) {
	var noble = require('../index');

	//toggle

	//ostatnie nadanie przez beacon
	//zamienic na tablice dla wielu beaconow
	var last_signal = 0;

	noble.on('stateChange', function(state) 
	{
		if (state === 'poweredOn') 
		{
			noble.startScanning([],true);
		}
		else
		{
  		  	noble.stopScanning();
		}
	});

	noble.on('discover', function(peripheral) 
	{
		var current_time = Date.prototype.getMilliseconds();
		//if dla jednego mac, zamienic na switch dla wielu mac	
		if(peripheral.address == mac) 
		{	
			last_signal = current_time;
			//optymalny dystans(73), zaokraglanie do zrobienia -> mniej skokow
			if(peripheral.rssi >= -73) 
			{
				//ODBLOKUJ
				//console.log('rssi: ' + peripheral.rssi);
			
				var fs = require('fs');
				fs.writeFile("comm.channel.scan", 1, function(err) {
   					if(err) {
        				return console.log(err);
    				}
				});
				return 0; 
			
			/*
			if(blokada==1) {
				var child = exec('cinnamon-screensaver-command -d', function (error, stdout, stderr) 
					{
        				if (error !== null) 
        				{
             				console.log('exec error: ' + error);
        				}
    				});
				blokada=0;
			}
			*/
			}
			else 
			{
				//ZABLOKUJ
			
				var fs = require('fs');
				fs.writeFile("comm.channel.scan", 1, function(err) {
   					if(err) {
       		 			return console.log(err);
    				}
				}); 
				return 0;
			
			/*
			if(blokada==0) 
			{		
				var child2 = exec('cinnamon-screensaver-command -l', function (error, stdout, stderr) 
				{
        			if (error !== null) 
        			{
             			console.log('exec error: ' + error);
        			}
    			});
				blokada=1;	
			}
			*/
			}
		}
		else if((current_time + 1000 - last_signal)%1000 >= 800)
		{
			//ZABLOKUJ
		
			var fs = require('fs');
			fs.writeFile("comm.channel.scan", 1, function(err) {
   				if(err) {
        			return console.log(err);
    			}
			}); 
			return 0;
		/*
		if(blokada==0) 
		{		
			var child2 = exec('cinnamon-screensaver-command -l', function (error, stdout, stderr) 
			{
       			if (error !== null) 
       			{
           			console.log('exec error: ' + error);
       			}
    		});
			blokada=1;	
		}
		*/

		}
	});
}
//var mac = "ee:3b:32:98:1d:31";

//czytanie adresu mac

var mac;
fs = require('fs')
fs.readFile('comm.channel.launcher', 'utf8', function (err,data) {
	if (err) {
    	return console.log(err);
    }
	data = data.replace(/(\r\n|\n|\r)/gm,"");
	//console.log(data);
	macready(data);
});





/*
var noble = require('../index');
var exec = require('child_process').exec;

//toggle
var blokada=0;

//ostatnie nadanie przez beacon
//zamienic na tablice dla wielu beaconow
var last_signal = 0;

noble.on('stateChange', function(state) 
{
	if (state === 'poweredOn') 
	{
	noble.startScanning([],true);
	}
	else
	{
    	noble.stopScanning();
	}
});

noble.on('discover', function(peripheral) 
{
	var current_time = Date.prototype.getMilliseconds();
	//if dla jednego mac, zamienic na switch dla wielu mac	
	if(peripheral.address == mac) 
	{	
		last_signal = current_time;
		//optymalny dystans(73), zaokraglanie do zrobienia -> mniej skokow
		if(peripheral.rssi >= -73) 
		{
			//ODBLOKUJ
			//console.log('rssi: ' + peripheral.rssi);
			
			if(blokada==1) {
				var child = exec('cinnamon-screensaver-command -d', function (error, stdout, stderr) 
					{
        				if (error !== null) 
        				{
             				console.log('exec error: ' + error);
        				}
    				});
				blokada=0;
			}
			
			//exit();
		}
		else 
		{
			//ZABLOKUJ
			
			if(blokada==0) 
			{		
				var child2 = exec('cinnamon-screensaver-command -l', function (error, stdout, stderr) 
				{
        			if (error !== null) 
        			{
             			console.log('exec error: ' + error);
        			}
    			});
				blokada=1;	
			}
			
			//exit();
		}
	}
	else if((current_time + 1000 - last_signal)%1000 >= 800)
	{
		//ZABLOKUJ
		
		if(blokada==0) 
		{		
			var child2 = exec('cinnamon-screensaver-command -l', function (error, stdout, stderr) 
			{
       			if (error !== null) 
       			{
           			console.log('exec error: ' + error);
       			}
    		});
			blokada=1;	
		}
		
		//exit();	
	}
});
*/
